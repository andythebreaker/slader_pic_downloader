# coding=utf8
# use py 3.6.6

import glob
import wget
import PIL
from PIL import ImageFont
from PIL import Image
from PIL import ImageDraw
import textwrap
import sys
import pathlib

def text2png(text, fullpath, color = "#000", bgcolor = "#FFF", fontfullpath = None, fontsize = 18, leftpadding = 3, rightpadding = 3, width = 500):
    REPLACEMENT_CHARACTER = u'\uFFFD'
    NEWLINE_REPLACEMENT_STRING = ' ' + REPLACEMENT_CHARACTER + ' '

    #prepare linkback
    linkback = "auto generated by downloader"
    fontlinkback = ImageFont.truetype('NotoSans-Regular.ttf', 8)
    linkbackx = fontlinkback.getsize(linkback)[0]
    linkback_height = fontlinkback.getsize(linkback)[1]
    #end of linkback

    font = ImageFont.load_default() if fontfullpath == None else ImageFont.truetype(fontfullpath, fontsize)
    text = text.replace('`1234567890-=qwertyuiop[]asdfghjkl;zxcvbnm,./','\n').replace('\n    ','').replace('\n', NEWLINE_REPLACEMENT_STRING)

    line_in_fucn_txt2imgZZZs = []
    line_in_fucn_txt2imgZZZ = u""

    for word in text.split():
        print( word)
        if word == REPLACEMENT_CHARACTER: #give a blank line
            line_in_fucn_txt2imgZZZs.append( line_in_fucn_txt2imgZZZ[1:] ) #slice the white space in the begining of the line
            line_in_fucn_txt2imgZZZ = u""
            line_in_fucn_txt2imgZZZs.append( u"" ) #the blank line
        elif font.getsize( line_in_fucn_txt2imgZZZ + ' ' + word )[0] <= (width - rightpadding - leftpadding):
            line_in_fucn_txt2imgZZZ += ' ' + word
        else: #start a new line
            line_in_fucn_txt2imgZZZs.append( line_in_fucn_txt2imgZZZ[1:] ) #slice the white space in the begining of the line
            line_in_fucn_txt2imgZZZ = u""
            list1=textwrap.wrap(word, width=40)
            INTitemCount=0
            for list1i in list1:
                INTitemCount=INTitemCount+1
                if INTitemCount==len(list1):
                    line_in_fucn_txt2imgZZZ += ' ' + list1i
                else:
                    line_in_fucn_txt2imgZZZ += ' ' + list1i
                    line_in_fucn_txt2imgZZZs.append( line_in_fucn_txt2imgZZZ[1:] ) #slice the white space in the begining of the line
                    line_in_fucn_txt2imgZZZ = u""
                    line_in_fucn_txt2imgZZZs.append( u"" ) #the blank line

    if len(line_in_fucn_txt2imgZZZ) != 0:
        line_in_fucn_txt2imgZZZs.append( line_in_fucn_txt2imgZZZ[1:] ) #add the last line

    line_height = font.getsize(text)[1]
    img_height = line_height * (len(line_in_fucn_txt2imgZZZs) + 1)

    img = Image.new("RGBA", (width, img_height), bgcolor)
    draw = ImageDraw.Draw(img)

    y = 0
    for line_in_fucn_txt2imgZZZ in line_in_fucn_txt2imgZZZs:
        draw.text( (leftpadding, y), line_in_fucn_txt2imgZZZ, color, font=font)
        y += line_height

    # add linkback at the bottom
    draw.text( (width - linkbackx, img_height - linkback_height), linkback, color, font=fontlinkback)

    img.save(fullpath)

def read_first_line(file):
    """Gets the first line from a file.

    Returns
    -------
    str
        the first line text of the input file
    """
    with open(file, 'rt',encoding="utf-8") as fd:
        first_line = fd.readline()
    
    f = open(file, 'r',encoding="utf-8") # 開啟並讀取檔案
    lines = f.readlines() # 讀取檔案內容的每一行文字為陣列

    counter_wget=1
    sub_counter=0
    wget_file_name=""
    for line in lines:
        print(line, end = '') # 印出時結尾不印new line
        if counter_wget<3:
            print('~~~')
        elif counter_wget==3:
            wget_file_name=line.rstrip()
        else:
            if counter_wget%2==1:
                if line.find('png')!=-1:
                    wget.download(line,out=wget_file_name+str(sub_counter)+".png")
                elif line.find('jpeg')!=-1:
                    wget.download(line,out=wget_file_name+str(sub_counter)+".jpeg")
                else:
                    text2png(line, wget_file_name+str(sub_counter)+".png", fontfullpath = "NotoSans-Regular.ttf")
                    #line no 'u' will go bad?
                sub_counter=sub_counter+1
            else:
                print('~~~***')
        counter_wget=counter_wget+1
    f.close() # 關閉檔案
        
    return first_line



def merge_per_folder(folder_path, output_filename):
    """Merges first lines of text files in one folder, and
    writes combined lines into new output file

    Parameters
    ----------
    folder_path : str
        String representation of the folder path containing the text files.
    output_filename : str
        Name of the output file the merged lines will be written to.
    """
    # make sure there's a slash to the folder path 
    folder_path += "" if folder_path[-1] == "/" else "/"
    # get all text files
    txt_files = glob.glob(folder_path + "*.txt")
    # get first lines; map to each text file (sorted)
    output_strings = map(read_first_line, sorted(txt_files))
    output_content = "".join(output_strings)
    # write to file
    with open(folder_path + output_filename, 'wt') as outfile:
        outfile.write(output_content)

merge_per_folder(str(pathlib.Path(__file__).parent.absolute()), 'finish.txt')
